<?xml version='1.0' encoding='utf-8'?>
<scheme description="" title="Pipeline1B" version="2.0">
	<nodes>
		<node id="0" name="Neural Network" position="(838.0, 207.0)" project_name="Orange3" qualified_name="Orange.widgets.model.owneuralnetwork.OWNNLearner" title="Neural Network" version="" />
		<node id="1" name="Test and Score" position="(1012.0, 132.0)" project_name="Orange3" qualified_name="Orange.widgets.evaluate.owtestandscore.OWTestAndScore" title="Trainingsergebnisse testen und vergleichen" version="" />
		<node id="2" name="Preprocess" position="(344.0, 63.0)" project_name="Orange3" qualified_name="Orange.widgets.data.owpreprocess.OWPreprocess" title="Rohdaten normalisieren" version="" />
		<node id="3" name="Data Table" position="(523.0, 63.0)" project_name="Orange3" qualified_name="Orange.widgets.data.owtable.OWDataTable" title="Vorverarbeitete Daten anschauen" version="" />
		<node id="4" name="Select Columns" position="(227.0, 63.0)" project_name="Orange3" qualified_name="Orange.widgets.data.owselectcolumns.OWSelectAttributes" title="Rohdaten selektieren" version="" />
		<node id="5" name="ROC Analysis" position="(1194.0, 125.0)" project_name="Orange3" qualified_name="Orange.widgets.evaluate.owrocanalysis.OWROCAnalysis" title="ROC Analyse" version="" />
		<node id="6" name="Save Model" position="(1011.0, 381.0)" project_name="Orange3" qualified_name="Orange.widgets.model.owsavemodel.OWSaveModel" title="Speichern trainiertes Orange3-Modell in ./modelle/orange-modell.pkcls" version="" />
		<node id="7" name="Data Table" position="(1193.0, 222.0)" project_name="Orange3" qualified_name="Orange.widgets.data.owtable.OWDataTable" title="Vorhersagen anschauen" version="" />
		<node id="8" name="Data Sampler" position="(645.0, 128.0)" project_name="Orange3" qualified_name="Orange.widgets.data.owdatasampler.OWDataSampler" title="Splitten 80/20 Training/Test" version="" />
		<node id="9" name="CSV File Import" position="(92.0, 61.0)" project_name="Orange3" qualified_name="Orange.widgets.data.owcsvimport.OWCSVFileImport" title="Rohdaten" version="" />
		<node id="10" name="kNN" position="(841.0, 292.0)" project_name="Orange3" qualified_name="Orange.widgets.model.owknn.OWKNNLearner" title="kNN" version="" />
		<node id="11" name="AdaBoost" position="(842.0, 375.0)" project_name="Orange3" qualified_name="Orange.widgets.model.owadaboost.OWAdaBoost" title="AdaBoost" version="" />
		<node id="12" name="Python Script" position="(845.0, 484.0)" project_name="Orange3" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" title="Trainieren und Speichern pures SKLearn-Modell in ./modelle/sklearn-ows-modell.pkcls und ./modelle/sklearn-ows-modell.json" version="" />
		<node id="13" name="Save Data" position="(569.0, 426.0)" project_name="Orange3" qualified_name="Orange.widgets.data.owsave.OWSave" title="80% Trainingsdaten speichern in ./csv-vorverarbeitet/train-80p-stratified-data.csv" version="" />
		<node id="14" name="Save Data" position="(685.0, 496.0)" project_name="Orange3" qualified_name="Orange.widgets.data.owsave.OWSave" title="20% Testdaten speichern in ./csv-vorverarbeitet/test-20p-stratified-data.csv" version="" />
	</nodes>
	<links>
		<link enabled="true" id="0" sink_channel="Learner" sink_node_id="1" source_channel="Learner" source_node_id="0" />
		<link enabled="true" id="1" sink_channel="Data" sink_node_id="3" source_channel="Preprocessed Data" source_node_id="2" />
		<link enabled="true" id="2" sink_channel="Data" sink_node_id="2" source_channel="Data" source_node_id="4" />
		<link enabled="true" id="3" sink_channel="Evaluation Results" sink_node_id="5" source_channel="Evaluation Results" source_node_id="1" />
		<link enabled="true" id="4" sink_channel="Data" sink_node_id="7" source_channel="Predictions" source_node_id="1" />
		<link enabled="true" id="5" sink_channel="Data" sink_node_id="8" source_channel="Data" source_node_id="3" />
		<link enabled="true" id="6" sink_channel="Data" sink_node_id="1" source_channel="Data Sample" source_node_id="8" />
		<link enabled="true" id="7" sink_channel="Test Data" sink_node_id="1" source_channel="Remaining Data" source_node_id="8" />
		<link enabled="true" id="8" sink_channel="Data" sink_node_id="4" source_channel="Data" source_node_id="9" />
		<link enabled="true" id="9" sink_channel="Data" sink_node_id="0" source_channel="Data Sample" source_node_id="8" />
		<link enabled="true" id="10" sink_channel="Data" sink_node_id="10" source_channel="Data Sample" source_node_id="8" />
		<link enabled="true" id="11" sink_channel="Learner" sink_node_id="1" source_channel="Learner" source_node_id="10" />
		<link enabled="true" id="12" sink_channel="Data" sink_node_id="11" source_channel="Data Sample" source_node_id="8" />
		<link enabled="true" id="13" sink_channel="Model" sink_node_id="6" source_channel="Model" source_node_id="11" />
		<link enabled="true" id="14" sink_channel="Learner" sink_node_id="1" source_channel="Learner" source_node_id="11" />
		<link enabled="true" id="15" sink_channel="Data" sink_node_id="13" source_channel="Data Sample" source_node_id="8" />
		<link enabled="true" id="16" sink_channel="Data" sink_node_id="14" source_channel="Remaining Data" source_node_id="8" />
		<link enabled="true" id="17" sink_channel="Data" sink_node_id="12" source_channel="Data Sample" source_node_id="8" />
	</links>
	<annotations>
		<text font-family="Sans Serif" font-size="16" id="0" rect="(34.0, 183.0, 216.0, 169.0)" type="text/plain">Im "Rohdaten" Knoten muss eine Rohdaten-CSV-Datei gew√§hlt werden.
Training und Speichern des trainierten Modells (standard: Adaboost) erfolgt dann automatisch.</text>
		<arrow end="(91.99999999999997, 126.0)" fill="#C1272D" id="1" start="(91.99999999999997, 184.0)" />
		<arrow end="(1050.0, 377.0)" fill="#C1272D" id="2" start="(1111.0, 355.0)" />
		<text font-family="Sans Serif" font-size="16" id="3" rect="(1114.0, 336.0, 150.0, 101.0)" type="text/plain">Kann mit Backend "orange3" im ki-rennspiel.py getestet werden</text>
		<arrow end="(890.0, 487.0)" fill="#C1272D" id="4" start="(999.0, 536.0)" />
		<text font-family="Sans Serif" font-size="16" id="5" rect="(1005.0, 514.0, 232.0, 151.0)" type="text/plain">Kann mit Backend "sklearn" im ki-rennspiel.py getest werden.
Alternative zu (gleicher Code wie)
ki-trainieren-sklearn.py</text>
	</annotations>
	<thumbnail />
	<node_properties>
		<properties format="literal" node_id="0">{'activation_index': 2, 'alpha_index': 0, 'auto_apply': True, 'controlAreaVisible': True, 'hidden_layers_input': '10,10,', 'learner_name': 'Neural Network', 'max_iterations': 5000, 'replicable': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02P\x00\x00\x00\x1b\x00\x00\x03\xb3\x00\x00\x01\xe7\x00\x00\x02U\x00\x00\x00:\x00\x00\x03\xae\x00\x00\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x02U\x00\x00\x00:\x00\x00\x03\xae\x00\x00\x01\xe2', 'solver_index': 2, '__version__': 1}</properties>
		<properties format="pickle" node_id="1">gASV/gUAAAAAAAB9lCiMFGNvbXBhcmlzb25fY3JpdGVyaW9ulEsAjBJjb250cm9sQXJlYVZpc2li
bGWUiIwNY3Zfc3RyYXRpZmllZJSIjAduX2ZvbGRzlEsDjAluX3JlcGVhdHOUSwGMCnJlc2FtcGxp
bmeUSwWMBHJvcGWURz+5mZmZmZmajAtzYW1wbGVfc2l6ZZRLDIwTc2F2ZWRXaWRnZXRHZW9tZXRy
eZRDQgHZ0MsAAwAAAAAABQAAAB8AAAOUAAAC0AAAAAUAAABAAAADlAAAAtAAAAAAAAAAAAYAAAAA
BQAAAEAAAAOUAAAC0JSMEnNodWZmbGVfc3RyYXRpZmllZJSJjAh1c2Vfcm9wZZSJjAtzY29yZV90
YWJsZZR9lIwMc2hvd25fc2NvcmVzlI+UKIwCUjKUjANNQUWUjAZSZWNhbGyUjAlQcmVjaXNpb26U
jANBVUOUjANNU0WUjARSTVNFlIwCRjGUjAJDQZSQc4wLX192ZXJzaW9uX1+USwOMEGNvbnRleHRf
c2V0dGluZ3OUXZQojBVvcmFuZ2V3aWRnZXQuc2V0dGluZ3OUjAdDb250ZXh0lJOUKYGUfZQojAR0
aW1llEdB133n6IHioowGdmFsdWVzlH2UKIwPY2xhc3Nfc2VsZWN0aW9ulIwWKEF2ZXJhZ2Ugb3Zl
ciBjbGFzc2VzKZRK/////4aUjAxmb2xkX2ZlYXR1cmWUjAhTZWxlY3RlZJRLZYaUjBVmb2xkX2Zl
YXR1cmVfc2VsZWN0ZWSUiUr+////hpRoDX2UaBpLA3WMCmF0dHJpYnV0ZXOUKIwJUGxheWVyUG9z
lEsChpSMB0NhcjFQb3OUSwKGlIwHQ2FyMlBvc5RLAoaUjAdDYXIzUG9zlEsChpSMB0NhcjRQb3OU
SwKGlIwHQ2FyNVBvc5RLAoaUdJSMBW1ldGFzlIwIU2VsZWN0ZWSUSwGGlIWUjApjbGFzc192YXJz
lIwGQWN0aW9ulEsBhpSFlHViaB8pgZR9lChoIkdB14zUHZpwaWgjfZQojA9jbGFzc19zZWxlY3Rp
b26UjBYoQXZlcmFnZSBvdmVyIGNsYXNzZXMplEr/////hpSMDGZvbGRfZmVhdHVyZZSMCFNlbGVj
dGVklEtlhpSMFWZvbGRfZmVhdHVyZV9zZWxlY3RlZJSJSv7///+GlIwLc2NvcmVfdGFibGWUfZRo
GksDdWguKIwJUGxheWVyUG9zlEsChpSMB0NhcjFQb3OUSwKGlIwHQ2FyMlBvc5RLAoaUjAdDYXIz
UG9zlEsChpSMB0NhcjRQb3OUSwKGlIwHQ2FyNVBvc5RLAoaUdJRoPIwIU2VsZWN0ZWSUSwGGlIWU
aECMDEFjdGlvbiAgICAgIJRLAYaUhZR1YmgfKYGUfZQoaCJHQdd/J/HHpXpoI32UKIwPY2xhc3Nf
c2VsZWN0aW9ulIwWKEF2ZXJhZ2Ugb3ZlciBjbGFzc2VzKZRK/////4aUjAxmb2xkX2ZlYXR1cmWU
Tkr+////hpSMFWZvbGRfZmVhdHVyZV9zZWxlY3RlZJSJSv7///+GlIwLc2NvcmVfdGFibGWUfZRo
GksDdWguKGhRSwKGlGhTSwKGlGhVSwKGlGhXSwKGlGhZSwKGlGhbSwKGlGhhSwGGlHSUaDwpaEBo
XksBhpSFlHViaB8pgZR9lChoIkdB13pbuXC9QmgjfZQojA9jbGFzc19zZWxlY3Rpb26UjBYoQXZl
cmFnZSBvdmVyIGNsYXNzZXMplEr/////hpSMDGZvbGRfZmVhdHVyZZROSv7///+GlIwVZm9sZF9m
ZWF0dXJlX3NlbGVjdGVklIlK/v///4aUjAtzY29yZV90YWJsZZR9lGgaSwN1aC4ojAlQbGF5ZXJQ
b3OUSwKGlIwHQ2FyMVBvc5RLAoaUjAdDYXIyUG9zlEsChpSMB0NhcjNQb3OUSwKGlIwHQ2FyNFBv
c5RLAoaUjAdDYXI1UG9zlEsChpR0lGg8jAZBY3Rpb26USwOGlIWUaECMCFNlbGVjdGVklEsBhpSF
lHViZXUu
</properties>
		<properties format="literal" node_id="2">{'autocommit': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01Y\x00\x00\x00\x13\x00\x00\x03\x96\x00\x00\x01\xc9\x00\x00\x01^\x00\x00\x002\x00\x00\x03\x91\x00\x00\x01\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x01^\x00\x00\x002\x00\x00\x03\x91\x00\x00\x01\xc4', 'storedsettings': {'name': '', 'preprocessors': [('orange.preprocess.scale', {'method': 3})]}, '__version__': 2}</properties>
		<properties format="literal" node_id="3">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01M\x00\x00\x00o\x00\x00\x05A\x00\x00\x02\x86\x00\x00\x01R\x00\x00\x00\x8e\x00\x00\x05&lt;\x00\x00\x02\x81\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x01R\x00\x00\x00\x8e\x00\x00\x05&lt;\x00\x00\x02\x81', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 1}</properties>
		<properties format="pickle" node_id="4">gASVUw8AAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNzYXZl
ZFdpZGdldEdlb21ldHJ5lENCAdnQywADAAAAAAHMAAAAAAAAA0oAAAJ0AAAB0QAAAB8AAANFAAAC
bwAAAAAAAAAABkAAAAHRAAAAHwAAA0UAAAJvlIwSdXNlX2lucHV0X2ZlYXR1cmVzlImMC19fdmVy
c2lvbl9flEsBjBBjb250ZXh0X3NldHRpbmdzlF2UKIwVb3Jhbmdld2lkZ2V0LnNldHRpbmdzlIwH
Q29udGV4dJSTlCmBlH2UKIwGdmFsdWVzlH2UKIwRZG9tYWluX3JvbGVfaGludHOUfZQojAlQbGF5
ZXJQb3OUSwKGlIwJYXR0cmlidXRllEsAhpSMB0NhcjFQb3OUSwKGlGgUSwGGlIwHQ2FyMlBvc5RL
AoaUaBRLAoaUjAdDYXIzUG9zlEsChpRoFEsDhpSMB0NhcjRQb3OUSwKGlGgUSwSGlIwHQ2FyNVBv
c5RLAoaUaBRLBYaUjAZBY3Rpb26USwGGlIwFY2xhc3OUSwCGlHVK/v///4aUaAZLAXWMCmF0dHJp
YnV0ZXOUfZQoaBJLAmgWSwJoGUsCaBxLAmgfSwJoIksCaCVLAXWMBW1ldGFzlH2UdWJoCymBlH2U
KGgOfZQojBFkb21haW5fcm9sZV9oaW50c5R9lCiMCVBsYXllclBvc5RLAoaUjAlhdHRyaWJ1dGWU
SwCGlIwHQ2FyMVBvc5RLAoaUaDVLAYaUjAdDYXIyUG9zlEsChpRoNUsChpSMB0NhcjNQb3OUSwKG
lGg1SwOGlIwHQ2FyNFBvc5RLAoaUaDVLBIaUjAdDYXI1UG9zlEsChpRoNUsFhpSMBkFjdGlvbpRL
AYaUjAVjbGFzc5RLAIaUdUr+////hpRoBksBdWgqfZQoaDNLAmg3SwJoOksCaD1LAmhASwJoQ0sC
aEZLAXVoLH2UdWJoCymBlH2UKGgOfZQojBFkb21haW5fcm9sZV9oaW50c5R9lCiMCVBsYXllclBv
c5RLAoaUjAlhdHRyaWJ1dGWUSwCGlIwHQ2FyMVBvc5RLAoaUaFRLAYaUjAdDYXIyUG9zlEsChpRo
VEsChpSMB0NhcjNQb3OUSwKGlGhUSwOGlIwHQ2FyNFBvc5RLAoaUaFRLBIaUjAdDYXI1UG9zlEsC
hpRoVEsFhpSMBkFjdGlvbpRLAYaUjAVjbGFzc5RLAIaUdUr+////hpRoBksBdWgqfZQoaFJLAmhW
SwJoWUsCaFxLAmhfSwJoYksCaGVLAXVoLH2UdWJoCymBlH2UKGgOfZQojBFkb21haW5fcm9sZV9o
aW50c5R9lCiMCVBsYXllclBvc5RLAoaUjAlhdHRyaWJ1dGWUSwCGlIwHQ2FyMVBvc5RLAoaUaHNL
AYaUjAdDYXIyUG9zlEsChpRoc0sChpSMB0NhcjNQb3OUSwKGlGhzSwOGlIwHQ2FyNFBvc5RLAoaU
aHNLBIaUjAdDYXI1UG9zlEsChpRoc0sFhpSMBkFjdGlvbpRLAYaUjAVjbGFzc5RLAIaUdUr+////
hpRoBksBdWgqfZQoaHFLAmh1SwJoeEsCaHtLAmh+SwJogUsCaIRLAXVoLH2UdWJoCymBlH2UKGgO
fZQoaG99lCiMCVBsYXllclBvc5RLAoaUaHNLAIaUjAdDYXIxUG9zlEsChpRoc0sBhpSMB0NhcjJQ
b3OUSwKGlGhzSwKGlIwHQ2FyM1Bvc5RLAoaUaHNLA4aUjAdDYXI0UG9zlEsChpRoc0sEhpSMB0Nh
cjVQb3OUSwKGlGhzSwWGlIwGQWN0aW9ulEsBhpRohksAhpR1Sv7///+GlGgGSwF1aCp9lChoj0sC
aJJLAmiVSwJomEsCaJtLAmieSwJooUsBdWgsfZR1YmgLKYGUfZQoaA59lCiMEWRvbWFpbl9yb2xl
X2hpbnRzlH2UKIwJUGxheWVyUG9zlEsChpSMCWF0dHJpYnV0ZZRLAIaUjAdDYXIxUG9zlEsChpRo
rksBhpSMB0NhcjJQb3OUSwKGlGiuSwKGlIwHQ2FyM1Bvc5RLAoaUaK5LA4aUjAdDYXI0UG9zlEsC
hpRorksEhpSMB0NhcjVQb3OUSwKGlGiuSwWGlIwGQWN0aW9ulEsBhpSMBWNsYXNzlEsAhpR1Sv7/
//+GlGgGSwF1aCp9lChorEsCaLBLAmizSwJotksCaLlLAmi8SwJov0sBdWgsfZR1YmgLKYGUfZQo
aA59lChoqn2UKIwJUGxheWVyUG9zlEsChpRorksAhpSMB0NhcjFQb3OUSwKGlGiuSwGGlIwHQ2Fy
MlBvc5RLAoaUaK5LAoaUjAdDYXIzUG9zlEsChpRorksDhpSMB0NhcjRQb3OUSwKGlGiuSwSGlIwH
Q2FyNVBvc5RLAoaUaK5LBYaUjAZBY3Rpb26USwGGlGjBSwCGlHVK/v///4aUaAZLAXVoKn2UKGjK
SwJozUsCaNBLAmjTSwJo1ksCaNlLAmjcSwF1aCx9lHViaAspgZR9lChoDn2UKIwRZG9tYWluX3Jv
bGVfaGludHOUfZQojAlQbGF5ZXJQb3OUSwKGlIwJYXR0cmlidXRllEsAhpSMB0NhcjFQb3OUSwKG
lGjpSwGGlIwHQ2FyMlBvc5RLAoaUaOlLAoaUjAdDYXIzUG9zlEsChpRo6UsDhpSMB0NhcjRQb3OU
SwKGlGjpSwSGlIwHQ2FyNVBvc5RLAoaUaOlLBYaUjAZBY3Rpb26USwGGlIwFY2xhc3OUSwCGlHVK
/v///4aUaAZLAXVoKn2UKGjnSwJo60sCaO5LAmjxSwJo9EsCaPdLAmj6SwF1aCx9lHViaAspgZR9
lChoDn2UKGjlfZQojAlQbGF5ZXJQb3OUSwKGlGjpSwCGlIwHQ2FyMVBvc5RLAoaUaOlLAYaUjAdD
YXIyUG9zlEsChpRo6UsChpSMB0NhcjNQb3OUSwKGlGjpSwOGlIwHQ2FyNFBvc5RLAoaUaOlLBIaU
jAdDYXI1UG9zlEsChpRo6UsFhpSMBkFjdGlvbpRLAYaUaPxLAIaUdUr+////hpRoBksBdWgqfZQo
agUBAABLAmoIAQAASwJqCwEAAEsCag4BAABLAmoRAQAASwJqFAEAAEsCahcBAABLAXVoLH2UdWJo
CymBlH2UKGgOfZQojBFkb21haW5fcm9sZV9oaW50c5R9lCiMCVBsYXllclBvc5RLAoaUjAlhdHRy
aWJ1dGWUSwCGlIwHQ2FyMVBvc5RLAoaUaiQBAABLAYaUjAdDYXIyUG9zlEsChpRqJAEAAEsChpSM
B0NhcjNQb3OUSwKGlGokAQAASwOGlIwHQ2FyNFBvc5RLAoaUaiQBAABLBIaUjAdDYXI1UG9zlEsC
hpRqJAEAAEsFhpSMBkFjdGlvbpRLAYaUjAVjbGFzc5RLAIaUdUr+////hpRoBksBdWgqfZQoaiIB
AABLAmomAQAASwJqKQEAAEsCaiwBAABLAmovAQAASwJqMgEAAEsCajUBAABLAXVoLH2UdWJoCymB
lH2UKGgOfZQojBFkb21haW5fcm9sZV9oaW50c5R9lCiMCVBsYXllclBvc5RLAoaUjAlhdHRyaWJ1
dGWUSwCGlIwHQ2FyMVBvc5RLAoaUakMBAABLAYaUjAdDYXIyUG9zlEsChpRqQwEAAEsChpSMB0Nh
cjNQb3OUSwKGlGpDAQAASwOGlIwHQ2FyNFBvc5RLAoaUakMBAABLBIaUjAdDYXI1UG9zlEsChpRq
QwEAAEsFhpSMBkFjdGlvbpRLAYaUjAVjbGFzc5RLAIaUdUr+////hpRoBksBdWgqfZQoakEBAABL
AmpFAQAASwJqSAEAAEsCaksBAABLAmpOAQAASwJqUQEAAEsCalQBAABLAXVoLH2UdWJoCymBlH2U
KIwEdGltZZRHQdd95+e00kVoDn2UKIwRZG9tYWluX3JvbGVfaGludHOUfZQojAlQbGF5ZXJQb3OU
SwKGlIwJYXR0cmlidXRllEsAhpSMB0NhcjFQb3OUSwKGlGpjAQAASwGGlIwHQ2FyMlBvc5RLAoaU
amMBAABLAoaUjAdDYXIzUG9zlEsChpRqYwEAAEsDhpSMB0NhcjRQb3OUSwKGlGpjAQAASwSGlIwH
Q2FyNVBvc5RLAoaUamMBAABLBYaUjAZBY3Rpb26USwGGlIwFY2xhc3OUSwCGlHVK/v///4aUaAZL
AXVoKn2UKIwJUGxheWVyUG9zlEsCjAdDYXIxUG9zlEsCjAdDYXIyUG9zlEsCjAdDYXIzUG9zlEsC
jAdDYXI0UG9zlEsCjAdDYXI1UG9zlEsCjAZBY3Rpb26USwF1aCx9lHViaAspgZR9lChqXQEAAEdB
14pgiRE282gOfZQojBFkb21haW5fcm9sZV9oaW50c5R9lCiMCVBsYXllclBvc5RLAoaUjAlhdHRy
aWJ1dGWUSwCGlIwHQ2FyMVBvc5RLAoaUaokBAABLAYaUjAdDYXIyUG9zlEsChpRqiQEAAEsChpSM
B0NhcjNQb3OUSwKGlGqJAQAASwOGlIwHQ2FyNFBvc5RLAoaUaokBAABLBIaUjAdDYXI1UG9zlEsC
hpRqiQEAAEsFhpSMDEFjdGlvbiAgICAgIJRLAYaUjAVjbGFzc5RLAIaUdUr+////hpRoBksBdWgq
fZQojAlQbGF5ZXJQb3OUSwKMB0NhcjFQb3OUSwKMB0NhcjJQb3OUSwKMB0NhcjNQb3OUSwKMB0Nh
cjRQb3OUSwKMB0NhcjVQb3OUSwKMDEFjdGlvbiAgICAgIJRLAXVoLH2UdWJoCymBlH2UKGpdAQAA
R0HXelu5UDyzaA59lCiMEWRvbWFpbl9yb2xlX2hpbnRzlH2UKIwJUGxheWVyUG9zlEsChpSMCWF0
dHJpYnV0ZZRLAIaUjAdDYXIxUG9zlEsChpRqrwEAAEsBhpSMB0NhcjJQb3OUSwKGlGqvAQAASwKG
lIwHQ2FyM1Bvc5RLAoaUaq8BAABLA4aUjAdDYXI0UG9zlEsChpRqrwEAAEsEhpSMB0NhcjVQb3OU
SwKGlGqvAQAASwWGlIwGQWN0aW9ulEsDhpSMBG1ldGGUSwCGlHVK/v///4aUaAZLAXVoKn2UKGqt
AQAASwJqsQEAAEsCarQBAABLAmq3AQAASwJqugEAAEsCar0BAABLAnVoLH2UasABAABLA3N1YmV1
Lg==
</properties>
		<properties format="pickle" node_id="5">gASVZQcAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBRkaXNwbGF5X2NvbnZleF9jdXJ2
ZZSJjBNkaXNwbGF5X2NvbnZleF9odWxslImMFWRpc3BsYXlfZGVmX3RocmVzaG9sZJSIjBFkaXNw
bGF5X3BlcmZfbGluZZSIjAdmbl9jb3N0lE30AYwHZnBfY29zdJRN9AGMDXJvY19hdmVyYWdpbmeU
SwCME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAAAAAZcAAABHAAAFOQAAAx8AAAGXAAAA
aAAABTkAAAMfAAAAAAAAAAAGAAAAAZcAAABoAAAFOQAAAx+UjAx0YXJnZXRfcHJpb3KUjBVudW1w
eS5jb3JlLm11bHRpYXJyYXmUjAZzY2FsYXKUk5SMBW51bXB5lIwFZHR5cGWUk5SMAmY4lImIh5RS
lChLA4wBPJROTk5K/////0r/////SwB0lGJDCAAAAAAAAChAlIaUUpSMC19fdmVyc2lvbl9flEsB
jBBjb250ZXh0X3NldHRpbmdzlF2UKIwVb3Jhbmdld2lkZ2V0LnNldHRpbmdzlIwHQ29udGV4dJST
lCmBlH2UKIwGdmFsdWVzlH2UKIwUc2VsZWN0ZWRfY2xhc3NpZmllcnOUXZQoSwBLAUsCZYwMdGFy
Z2V0X2luZGV4lEsAaBpLAXWMB2NsYXNzZXOUjBRPcmFuZ2UuZGF0YS52YXJpYWJsZZSMCVR1cGxl
TGlzdJSTlIwBQZSMAUKUjAF4lIeUhZSBlIwQY2xhc3NpZmllcl9uYW1lc5RdlCiMDk5ldXJhbCBO
ZXR3b3JrlIwDa05OlIwIQWRhQm9vc3SUZXViaB8pgZR9lChoIn2UKGgkXZQoSwBLAWVoJksCaBpL
AXVoJ2gqaCtoLGgth5SFlIGUaDFdlCiMDk5ldXJhbCBOZXR3b3JrlIwDa05OlGV1YmgfKYGUfZQo
jAR0aW1llEdB15XrayqEtWgifZQojBRzZWxlY3RlZF9jbGFzc2lmaWVyc5RdlChLAEsBZYwMdGFy
Z2V0X2luZGV4lEsAaBpLAXVoJ12UKGgraCxoLWVoMV2UKIwOTmV1cmFsIE5ldHdvcmuUjANrTk6U
ZXViaB8pgZR9lChoQkdB15XravNzB2gifZQoaERdlChLAEsBSwJlaEZLAGgaSwF1aCdoR2gxXZQo
aEmMCEFkYUJvb3N0lGhKZXViaB8pgZR9lChoQkdB15Xraq07F2gifZQoaERdlChLAEsBSwJLA2Vo
RksAaBpLAXVoJ2hHaDFdlChoSYwNUmFuZG9tIEZvcmVzdJRoUGhKZXViaB8pgZR9lChoQkdB15Xn
TRJwB2gifZQoaERdlChLAEsBSwJLA0sEZWhGSwBoGksBdWgnXZQoaCtoLGgtZWgxXZQojA5OZXVy
YWwgTmV0d29ya5SMA1NWTZSMDVJhbmRvbSBGb3Jlc3SUjAhBZGFCb29zdJSMA2tOTpRldWJoHymB
lH2UKGhCR0HXjNdA8BRKaCJ9lCiMFHNlbGVjdGVkX2NsYXNzaWZpZXJzlF2UKEsASwFLAksDZYwM
dGFyZ2V0X2luZGV4lEsAaBpLAXVoJ2hbaDFdlChoXWheaF9oYGV1YmgfKYGUfZQoaEJHQdeM10Bc
rMtoIn2UKGhlXZQoSwBLAUsCZWhnSwBoGksBdWgnaFtoMV2UKGhdaF5oX2V1YmgfKYGUfZQoaEJH
QdeM1z/DvvRoIn2UKGhlXZQoSwBLAWVoZ0sAaBpLAXVoJ2hbaDFdlChoXWheZXViaB8pgZR9lCho
QkdB14zWkrfUFWgifZQoaGVdlEsAYWhnSwJoGksBdWgnXZQoaCtoLGgtZWgxXZSMDk5ldXJhbCBO
ZXR3b3JrlGF1YmgfKYGUfZQoaEJHQdeM0/EjyAtoIn2UKGhlXZRLAGFoZ0sAaBpLAXVoJ12UKGgr
jB5BICAgICAgICAgICAgICAgICAgICAgICAgICAgICCUaCyMHkIgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIJRoLYweeCAgICAgICAgICAgICAgICAgICAgICAgICAgICAglGVoMV2UaF1hdWJo
HymBlH2UKGhCR0HXimZOWA5faCJ9lCiMFHNlbGVjdGVkX2NsYXNzaWZpZXJzlF2USwBhjAx0YXJn
ZXRfaW5kZXiUSwBoGksBdWgnXZQoaCtoLGgtZWgxXZSMFk5ldXJhbCBOZXR3b3JrICgxMCwxMCmU
YXViaB8pgZR9lChoQkdB14pmNf9pGWgifZQoaIZdlChLAEsBZWiISwBoGksBdWgnaIloMV2UKGiL
jA1SYW5kb20gRm9yZXN0lGV1YmgfKYGUfZQoaEJHQdeKYGoZUNxoIn2UKGiGXZRLAGFoiEsAaBpL
AXVoJ12UKIwRQSAgICAgICAgICAgICAgICCUjBFCICAgICAgICAgICAgICAgIJSMEXggICAgICAg
ICAgICAgICAglGVoMV2UaHlhdWJldS4=
</properties>
		<properties format="literal" node_id="6">{'auto_save': True, 'controlAreaVisible': True, 'filter': 'Pickled model (*.pkcls)', 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02s\x00\x00\x00\xe2\x00\x00\x03\x9d\x00\x00\x01x\x00\x00\x02s\x00\x00\x01\x03\x00\x00\x03\x9d\x00\x00\x01x\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x02s\x00\x00\x01\x03\x00\x00\x03\x9d\x00\x00\x01x', 'stored_name': 'orange3-model.pkcls', 'stored_path': 'modelle', '__version__': 1}</properties>
		<properties format="literal" node_id="7">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01W\x00\x00\x00\xac\x00\x00\x05A\x00\x00\x02\xb1\x00\x00\x01W\x00\x00\x00\xac\x00\x00\x05A\x00\x00\x02\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x01W\x00\x00\x00\xac\x00\x00\x05A\x00\x00\x02\xb1', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 1}</properties>
		<properties format="literal" node_id="8">{'compatibility_mode': False, 'controlAreaVisible': True, 'number_of_folds': 10, 'replacement': False, 'sampleSizeNumber': 1, 'sampleSizePercentage': 80, 'sampleSizeSqlPercentage': 0.1, 'sampleSizeSqlTime': 1, 'sampling_type': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02\x8a\x00\x00\x00x\x00\x00\x03\xa2\x00\x00\x02\xa1\x00\x00\x02\x8f\x00\x00\x00\x97\x00\x00\x03\x9d\x00\x00\x02\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x02\x8f\x00\x00\x00\x97\x00\x00\x03\x9d\x00\x00\x02\x9c', 'selectedFold': 1, 'sql_dl': False, 'stratify': True, 'use_seed': True, '__version__': 2}</properties>
		<properties format="literal" node_id="9">{'_session_items': [('./csv-rohdaten/120minutes-1.csv', {'encoding': 'utf-8', 'delimiter': ',', 'quotechar': '"', 'doublequote': True, 'skipinitialspace': True, 'quoting': 0, 'columntypes': [{'start': 0, 'stop': 7, 'value': 'Auto'}], 'rowspec': [{'start': 0, 'stop': 1, 'value': 'Header'}], 'decimal_separator': '.', 'group_separator': ''}), ('./csv-rohdaten/ki-rennspiel-log-20210302211909.csv', {'encoding': 'utf-8', 'delimiter': ',', 'quotechar': '"', 'doublequote': True, 'skipinitialspace': True, 'quoting': 0, 'columntypes': [{'start': 0, 'stop': 7, 'value': 'Auto'}], 'rowspec': [{'start': 0, 'stop': 1, 'value': 'Header'}], 'decimal_separator': '.', 'group_separator': ''}), ('./csv-rohdaten/120minutes-1.csv', {'encoding': 'utf-8', 'delimiter': ',', 'quotechar': '"', 'doublequote': True, 'skipinitialspace': True, 'quoting': 0, 'columntypes': [{'start': 0, 'stop': 7, 'value': 'Auto'}], 'rowspec': [{'start': 0, 'stop': 1, 'value': 'Header'}], 'decimal_separator': '.', 'group_separator': ''}), ('./csv-rohdaten/120minutes-1.csv', {'encoding': 'utf-8', 'delimiter': ',', 'quotechar': '"', 'doublequote': True, 'skipinitialspace': True, 'quoting': 0, 'columntypes': [{'start': 0, 'stop': 7, 'value': 'Auto'}], 'rowspec': [{'start': 0, 'stop': 1, 'value': 'Header'}], 'decimal_separator': '.', 'group_separator': ''}), ('./csv-rohdaten/120minutes-1.csv', {'encoding': 'utf-8', 'delimiter': ',', 'quotechar': '"', 'doublequote': True, 'skipinitialspace': True, 'quoting': 0, 'columntypes': [{'start': 0, 'stop': 6, 'value': 'Numeric'}, {'start': 6, 'stop': 7, 'value': 'Categorical'}], 'rowspec': [{'start': 0, 'stop': 1, 'value': 'Header'}], 'decimal_separator': '.', 'group_separator': ''}), ('./csv-rohdaten/60minutes-1.csv', {'encoding': 'utf-8', 'delimiter': ',', 'quotechar': '"', 'doublequote': True, 'skipinitialspace': True, 'quoting': 0, 'columntypes': [{'start': 0, 'stop': 6, 'value': 'Numeric'}, {'start': 6, 'stop': 7, 'value': 'Categorical'}], 'rowspec': [{'start': 0, 'stop': 1, 'value': 'Header'}], 'decimal_separator': '.', 'group_separator': ''})], 'controlAreaVisible': True, 'dialog_state': {'directory': './csv-rohdaten', 'filter': 'Text - comma separated (*.csv, *)'}, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01\x90\x00\x00\x00_\x00\x00\x02\xda\x00\x00\x01\xd2\x00\x00\x01\x90\x00\x00\x00\x80\x00\x00\x02\xda\x00\x00\x01\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x01\x90\x00\x00\x00\x80\x00\x00\x02\xda\x00\x00\x01\xd2', '__version__': 1}</properties>
		<properties format="literal" node_id="10">{'auto_apply': True, 'controlAreaVisible': True, 'learner_name': 'kNN', 'metric_index': 0, 'n_neighbors': 5, 'savedWidgetGeometry': None, 'weight_index': 0, '__version__': 1}</properties>
		<properties format="literal" node_id="11">{'algorithm_index': 1, 'auto_apply': True, 'controlAreaVisible': True, 'learner_name': '', 'learning_rate': 1.0, 'loss_index': 0, 'n_estimators': 50, 'random_seed': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02A\x00\x00\x00\x83\x00\x00\x03\xaa\x00\x00\x02M\x00\x00\x02A\x00\x00\x00\xa4\x00\x00\x03\xaa\x00\x00\x02M\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x02A\x00\x00\x00\xa4\x00\x00\x03\xaa\x00\x00\x02M', 'use_random_seed': False, '__version__': 1}</properties>
		<properties format="literal" node_id="12">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01y\x00\x00\x009\x00\x00\x04\x98\x00\x00\x02\xde\x00\x00\x01y\x00\x00\x00Z\x00\x00\x04\x98\x00\x00\x02\xde\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x01y\x00\x00\x00Z\x00\x00\x04\x98\x00\x00\x02\xde', 'scriptLibrary': [{'name': 'ki-trainieren-orange3', 'script': '#\n# ki-trainieren-orange3.py$\n#\n# (C) 2021, Christian A. Schiller, Deutsche Telekom AG\n#\n# Deutsche Telekom AG and all other contributors /\n# copyright owners license this file to you under the\n# MIT License (the "License"); you may not use this\n# file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https://opensource.org/licenses/MIT\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# Import required libraries\nimport pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.neural_network import MLPClassifier\nimport pickle\nimport json\nfrom time import gmtime, strftime\n\n#Gr√∂√üe des neuronalen Netzwerks\nhidden_layers_raw = "7,7"\nhidden_layers = hidden_layers_raw.split (",")\nhidden_layers = list(map(int, hidden_layers))\n\n# Laden der von Orange3 prozessierten Daten\nfilename_train = \'./csv-vorverarbeitet/train-80p-stratified-data.csv\'\nfilename_test = \'./csv-vorverarbeitet/test-20p-stratified-data.csv\'\n\n# Trainingsdaten\ndf_train = pd.read_csv(filename_train)\nprint(df_train.shape)\ndf_train = df_train.drop([\'Selected\'], axis=1)\ndf_train.head()\nX = df_train[[\'PlayerPos\',\'Car1Pos\',\'Car2Pos\',\'Car3Pos\',\'Car4Pos\',\'Car5Pos\']].values\ny = df_train[\'Action\'].values\n\n# Testdaten\ndf_test = pd.read_csv(filename_test)\nprint(df_test.shape)\ndf_test = df_test.drop([\'Selected\'], axis=1)\ndf_test.head()\nXt = df_test[[\'PlayerPos\',\'Car1Pos\',\'Car2Pos\',\'Car3Pos\',\'Car4Pos\',\'Car5Pos\']].values\nyt = df_test[\'Action\'].values\n\n# Instanziieren des ML-Modells\nmlp = MLPClassifier(hidden_layer_sizes=tuple(hidden_layers),\n                    activation=\'relu\', # default relu\n                    solver=\'adam\', # default sgd\n                    max_iter=5000, # default 200\n                    alpha=0.0001, # default 0.0001\n                    n_iter_no_change=100 # default 10\n                   )\n# Trainingsvorgang\nprint("Beginne Trainingsvorgang.")\nmlp.fit(X,y)\nprint("Training beendet.")\n\n# Ausgeben des Trainingsergebnisses\nprint("Erreichte Modellgenauigkeit (Trainingsdaten): ",mlp.score(X,y))\nprint("Erreichte Modellgenauigkeit (Testdaten)     : ",mlp.score(Xt,yt))\n\n# Timestamp erzeugen\nstamp = strftime("%Y%m%d%H%M%S", gmtime())\n\n# Speichern des Modells (Pickle-Format zur Nutzung im Python-Rennspiel)\nfilename = \'./modelle/sklearn-ows-modell-\'+stamp+\'.pkcls\'\nmlp_file = open(filename, \'wb\')\npickle.dump(mlp, mlp_file)\nprint("Pickle-Datei des trainierten ML-Modells gespeichert.")\nprint("Dateiname: "+filename)\n\n# Speichern des Modells (JSON-Format zur Nutzung auf Calliope mini)\n\njsonlayers = []\njsonlayers.append(6) # input layers\njsonlayers += hidden_layers # hidden Layers\njsonlayers.append(3) # output layer\n\ndata = {}\ndata[\'params\'] = []\ndata[\'params\'].append({\'layers\': jsonlayers})\ndata[\'params\'].append({\'act\': \'relu\'})\ndata[\'coefs\'] = []\nfor item in mlp.coefs_:\n    data[\'coefs\'].append(item.tolist())\ndata[\'intercepts\'] = []\nfor item in mlp.intercepts_:\n    data[\'intercepts\'].append(item.tolist())\n\nfilename = \'./modelle/sklearn-ows-modell-\'+stamp+\'.json\'\n\ndef round_floats(o):\n    if isinstance(o, float): return round(o, 6)\n    if isinstance(o, dict): return {k: round_floats(v) for k, v in o.items()}\n    if isinstance(o, (list, tuple)): return [round_floats(x) for x in o]\n    return o\n\nwith open(filename, \'w\') as outfile:\n    json.dump(round_floats(data), outfile, separators=(\',\',\':\'))\n\nprint("JSON-Datei des trainierten ML-Modells gespeichert.")\nprint("Dateiname: "+filename)\n', 'filename': './ki-trainieren-orange3.py'}], 'scriptText': '#\n# ki-trainieren-orange3.py$\n#\n# (C) 2021, Christian A. Schiller, Deutsche Telekom AG\n#\n# Deutsche Telekom AG and all other contributors /\n# copyright owners license this file to you under the\n# MIT License (the "License"); you may not use this\n# file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https://opensource.org/licenses/MIT\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# Import required libraries\nimport pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.neural_network import MLPClassifier\nimport pickle\nimport json\nfrom time import gmtime, strftime\n\n#Gr√∂√üe des neuronalen Netzwerks\nhidden_layers_raw = "7,7"\nhidden_layers = hidden_layers_raw.split (",")\nhidden_layers = list(map(int, hidden_layers))\n\n# Laden der von Orange3 prozessierten Daten\nfilename_train = \'./csv-vorverarbeitet/train-80p-stratified-data.csv\'\nfilename_test = \'./csv-vorverarbeitet/test-20p-stratified-data.csv\'\n\n# Trainingsdaten\ndf_train = pd.read_csv(filename_train)\nprint(df_train.shape)\ndf_train = df_train.drop([\'Selected\'], axis=1)\ndf_train.head()\nX = df_train[[\'PlayerPos\',\'Car1Pos\',\'Car2Pos\',\'Car3Pos\',\'Car4Pos\',\'Car5Pos\']].values\ny = df_train[\'Action\'].values\n\n# Testdaten\ndf_test = pd.read_csv(filename_test)\nprint(df_test.shape)\ndf_test = df_test.drop([\'Selected\'], axis=1)\ndf_test.head()\nXt = df_test[[\'PlayerPos\',\'Car1Pos\',\'Car2Pos\',\'Car3Pos\',\'Car4Pos\',\'Car5Pos\']].values\nyt = df_test[\'Action\'].values\n\n# Instanziieren des ML-Modells\nmlp = MLPClassifier(hidden_layer_sizes=tuple(hidden_layers),\n                    activation=\'relu\', # default relu\n                    solver=\'adam\', # default sgd\n                    max_iter=5000, # default 200\n                    alpha=0.0001, # default 0.0001\n                    n_iter_no_change=100 # default 10\n                   )\n# Trainingsvorgang\nprint("Beginne Trainingsvorgang.")\nmlp.fit(X,y)\nprint("Training beendet.")\n\n# Ausgeben des Trainingsergebnisses\nprint("Erreichte Modellgenauigkeit (Trainingsdaten): ",mlp.score(X,y))\nprint("Erreichte Modellgenauigkeit (Testdaten)     : ",mlp.score(Xt,yt))\n\n# Timestamp erzeugen\nstamp = strftime("%Y%m%d%H%M%S", gmtime())\n\n# Speichern des Modells (Pickle-Format zur Nutzung im Python-Rennspiel)\nfilename = \'./modelle/sklearn-ows-modell-\'+stamp+\'.pkcls\'\nmlp_file = open(filename, \'wb\')\npickle.dump(mlp, mlp_file)\nprint("Pickle-Datei des trainierten ML-Modells gespeichert.")\nprint("Dateiname: "+filename)\n\n# Speichern des Modells (JSON-Format zur Nutzung auf Calliope mini)\n\njsonlayers = []\njsonlayers.append(6) # input layers\njsonlayers += hidden_layers # hidden Layers\njsonlayers.append(3) # output layer\n\ndata = {}\ndata[\'params\'] = []\ndata[\'params\'].append({\'layers\': jsonlayers})\ndata[\'params\'].append({\'act\': \'relu\'})\ndata[\'coefs\'] = []\nfor item in mlp.coefs_:\n    data[\'coefs\'].append(item.tolist())\ndata[\'intercepts\'] = []\nfor item in mlp.intercepts_:\n    data[\'intercepts\'].append(item.tolist())\n\nfilename = \'./modelle/sklearn-ows-modell-\'+stamp+\'.json\'\n\ndef round_floats(o):\n    if isinstance(o, float): return round(o, 6)\n    if isinstance(o, dict): return {k: round_floats(v) for k, v in o.items()}\n    if isinstance(o, (list, tuple)): return [round_floats(x) for x in o]\n    return o\n\nwith open(filename, \'w\') as outfile:\n    json.dump(round_floats(data), outfile, separators=(\',\',\':\'))\n\nprint("JSON-Datei des trainierten ML-Modells gespeichert.")\nprint("Dateiname: "+filename)\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00y\x00\x00\x00y\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', '__version__': 2}</properties>
		<properties format="literal" node_id="13">{'add_type_annotations': False, 'auto_save': True, 'controlAreaVisible': True, 'filter': 'Comma-separated values (*.csv)', 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02\x9a\x00\x00\x016\x00\x00\x03\xf0\x00\x00\x01\xf6\x00\x00\x02\x9a\x00\x00\x01W\x00\x00\x03\xf0\x00\x00\x01\xf6\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x02\x9a\x00\x00\x01W\x00\x00\x03\xf0\x00\x00\x01\xf6', 'stored_name': 'train-80p-stratified-data.csv', 'stored_path': 'csv-vorverarbeitet', '__version__': 2}</properties>
		<properties format="literal" node_id="14">{'add_type_annotations': False, 'auto_save': True, 'controlAreaVisible': True, 'filter': 'Comma-separated values (*.csv)', 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02\x9a\x00\x00\x016\x00\x00\x03\xea\x00\x00\x01\xf6\x00\x00\x02\x9a\x00\x00\x01W\x00\x00\x03\xea\x00\x00\x01\xf6\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x02\x9a\x00\x00\x01W\x00\x00\x03\xea\x00\x00\x01\xf6', 'stored_name': 'test-20p-stratified-data.csv', 'stored_path': 'csv-vorverarbeitet', '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
